import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import mysql.connector
import numpy as np

db=mysql.connector.connect(host="localhost",
username="root",
password="RS01Ritul@123",
database="ecommerce")

cur=db.cursor()

# 1. List all unique cities where customers are located.
# query="""select distinct customer_city from customers"""
# cur.execute(query)
# cities=cur.fetchall()
# print(cities)

# 2. Count the number of orders placed in 2017.
# query="""select count(order_id) from orders where year(order_purchase_timestamp)=2017"""
# cur.execute(query)
# data=cur.fetchall()
# print(data[0][0])

# 3. Find the total sales per category.
# query="""select products.product_category category,
# round(sum(payments.payment_value),2) sales from products join orderitems
# on products.product_id=orderitems.product_id join payments
# on payments.order_id=orderitems.order_id
# group by category"""
# cur.execute(query)
# data=cur.fetchall()
# df=pd.DataFrame(data,columns=["Category","Sales"])
# print(df)

# 4. Calculate the percentage of orders that were paid in installments.
# query="""select sum(case when payment_installments>=1 then 1 else 0 end)/count(*)*100
# from payments"""
# cur.execute(query)
# data=cur.fetchall()
# print(data)

# 5. Count the number of customers from each state. 
# query="""select customer_state, count(customer_id) from customers group by customer_state
# """
# cur.execute(query)
# data=cur.fetchall()
# df=pd.DataFrame(data,columns=["state","customer_count"])
# df=df.sort_values(by="customer_count",ascending=False)
# plt.figure(figsize=(9,4))
# plt.bar(df["state"],df["customer_count"])
# plt.xticks(rotation=90)
# plt.show()
# print(df)





# 1. Calculate the number of orders per month in 2018.
# query="""select monthname(order_purchase_timestamp) months,count(order_id)
# order_count from orders where year(order_purchase_timestamp)=2018
# group by months
# """
# cur.execute(query)
# data=cur.fetchall()
# # print(data)
# df=pd.DataFrame(data,columns=["months","order_count"])
# o=["January","February","March","April","May","June","July","August","September",
# "October","November","December"]
# # print(df)
# ax=sns.barplot(x=df["months"],y=df["order_count"],data=df,order=o,
# # hue=df['months'], palette="viridis"
# color="red")
# plt.xticks(rotation=45)
# ax.bar_label(ax.containers[0])
# plt.title("count of orders by months is 2018")
# plt.show()

# 2. Find the average number of products per order, grouped by customer city.
# query="""with count_per_order as (
# select orders.order_id, orders.customer_id, count(orderitems.order_id)
# as oc from orders join orderitems on orders.order_id=orderitems.order_id
# group by orders.order_id, orders.customer_id)
# select customers.customer_city, round(avg(count_per_order.oc),2)
# average_order from customers join count_per_order on
# customers.customer_id=count_per_order.customer_id group by
# customers.customer_city order by average_order
# """
# cur.execute(query)
# data=cur.fetchall()
# # print(data)
# df=pd.DataFrame(data,columns=["customer_city","average_order"])
# print(df)

# 3. Calculate the percentage of total revenue contributed by each product category.
# query="""select upper(products.product_category) category,
# round((sum(payments.payment_value)/(select sum(payment_value) from payments))*100,2) sales
# from products join orderitems on products.product_id=orderitems.product_id
# join payments on payments.order_id=orderitems.order_id group by 
# category order by sales desc
# """
# cur.execute(query)
# data=cur.fetchall()
# # print(data)
# df=pd.DataFrame(data,columns=["category","percentage"])
# print(df)

# 4. Identify the correlation between product price and the number of times a product has been purchased.
# query="""select products.product_category, count(orderitems.product_id),
# round(avg(orderitems.price),2)
# from products join orderitems on products.product_id=orderitems.product_id
# group by products.product_category
# """
# cur.execute(query)
# data=cur.fetchall()
# # print(data)
# df=pd.DataFrame(data,columns=["category","order_count","price"])
# print(df)

# 5. Calculate the total revenue generated by each seller, and rank them by revenue.
query="""select * , dense_rank() over(order by revenue desc) as rn from 
(select orderitems.seller_id, sum(payments.payment_value) revenue from
orderitems join payments on orderitems.order_id=payments.order_id
group by orderitems.seller_id) as a
"""
cur.execute(query)
data=cur.fetchall()
# print(data)
df=pd.DataFrame(data,columns=["seller_id","revenue","rank"])
# print(df)
df=df.head(10)
sns.barplot(x="seller_id",y="revenue",data=df)
plt.xticks(rotation=90)
plt.show()